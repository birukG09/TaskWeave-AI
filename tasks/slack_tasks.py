"""
TaskWeave AI - Celery tasks for Slack integration
"""
import logging
import os
from celery import current_app as celery_app
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from simple_app import app

logger = logging.getLogger(__name__)

# Initialize Slack client
slack_client = None
slack_channel_id = None

def get_slack_client():
    """Get initialized Slack client"""
    global slack_client, slack_channel_id
    
    if not slack_client:
        slack_token = os.environ.get('SLACK_BOT_TOKEN')
        slack_channel_id = os.environ.get('SLACK_CHANNEL_ID')
        
        if slack_token:
            slack_client = WebClient(token=slack_token)
            logger.info("Slack client initialized")
        else:
            logger.warning("Slack credentials not available")
    
    return slack_client

@celery_app.task
def send_slack_report(report_data, channel=None):
    """Send progress report to Slack channel"""
    try:
        with app.app_context():
            client = get_slack_client()
            if not client:
                return {'status': 'error', 'message': 'Slack not configured'}
            
            channel = channel or slack_channel_id
            if not channel:
                return {'status': 'error', 'message': 'Slack channel not specified'}
            
            # Format report for Slack
            report_text = f"""
üìä *{report_data.get('title', 'Progress Report')}*

{report_data.get('content', 'Report content not available')}

_Generated by TaskWeave AI_
"""
            
            # Send message
            response = client.chat_postMessage(
                channel=channel,
                text=report_text,
                username='TaskWeave AI',
                icon_emoji=':robot_face:'
            )
            
            logger.info(f"Report sent to Slack channel {channel}")
            return {
                'status': 'success',
                'channel': channel,
                'message_ts': response['ts']
            }
            
    except SlackApiError as e:
        logger.error(f"Slack API error: {e}")
        return {'status': 'error', 'message': f"Slack API error: {e.response['error']}"}
    except Exception as e:
        logger.error(f"Slack report sending failed: {e}")
        return {'status': 'error', 'message': str(e)}

@celery_app.task
def send_task_notification(task_data, channel=None):
    """Send task notification to Slack"""
    try:
        with app.app_context():
            client = get_slack_client()
            if not client:
                return {'status': 'error', 'message': 'Slack not configured'}
            
            channel = channel or slack_channel_id
            
            # Format task notification
            priority_emoji = {
                'high': 'üî¥',
                'medium': 'üü°', 
                'low': 'üü¢'
            }
            
            emoji = priority_emoji.get(task_data.get('priority', 'medium'), '‚ö™')
            
            message_text = f"""
{emoji} *New Task Created*

*Title:* {task_data.get('title', 'Untitled Task')}
*Priority:* {task_data.get('priority', 'medium').title()}
*Source:* {task_data.get('source', 'manual')}
*Description:* {task_data.get('description', 'No description provided')}
"""
            
            if task_data.get('assignee'):
                message_text += f"\n*Assigned to:* {task_data['assignee']}"
            
            response = client.chat_postMessage(
                channel=channel,
                text=message_text,
                username='TaskWeave AI',
                icon_emoji=':memo:'
            )
            
            logger.info(f"Task notification sent to Slack: {task_data.get('title')}")
            return {
                'status': 'success',
                'channel': channel,
                'message_ts': response['ts']
            }
            
    except SlackApiError as e:
        logger.error(f"Slack API error: {e}")
        return {'status': 'error', 'message': f"Slack API error: {e.response['error']}"}
    except Exception as e:
        logger.error(f"Slack notification failed: {e}")
        return {'status': 'error', 'message': str(e)}

@celery_app.task
def send_daily_summary(org_id):
    """Send daily task summary to Slack"""
    try:
        with app.app_context():
            client = get_slack_client()
            if not client:
                return {'status': 'error', 'message': 'Slack not configured'}
            
            # Mock daily summary data - would fetch from database
            summary_data = {
                'tasks_completed': 5,
                'tasks_created': 3,
                'high_priority_remaining': 2,
                'team_members_active': 4,
                'integrations_processed': 12
            }
            
            summary_text = f"""
üåÖ *Daily Summary for Organization {org_id}*

üìã *Tasks Today:*
‚Ä¢ {summary_data['tasks_completed']} completed
‚Ä¢ {summary_data['tasks_created']} newly created
‚Ä¢ {summary_data['high_priority_remaining']} high-priority remaining

üë• *Team Activity:*
‚Ä¢ {summary_data['team_members_active']} active members
‚Ä¢ {summary_data['integrations_processed']} integration events processed

ü§ñ *AI Insights:*
Your team maintained good momentum today with strong task completion rate. Focus on the remaining high-priority items tomorrow.

_Daily summary by TaskWeave AI_
"""
            
            response = client.chat_postMessage(
                channel=slack_channel_id,
                text=summary_text,
                username='TaskWeave AI',
                icon_emoji=':chart_with_upwards_trend:'
            )
            
            logger.info(f"Daily summary sent for org {org_id}")
            return {
                'status': 'success',
                'summary_data': summary_data,
                'message_ts': response['ts']
            }
            
    except SlackApiError as e:
        logger.error(f"Slack API error: {e}")
        return {'status': 'error', 'message': f"Slack API error: {e.response['error']}"}
    except Exception as e:
        logger.error(f"Daily summary failed: {e}")
        return {'status': 'error', 'message': str(e)}

@celery_app.task 
def process_slack_mention(message_data):
    """Process Slack mentions for task creation or queries"""
    try:
        with app.app_context():
            client = get_slack_client()
            if not client:
                return {'status': 'error', 'message': 'Slack not configured'}
            
            text = message_data.get('text', '')
            channel = message_data.get('channel')
            user = message_data.get('user')
            
            # Check if it's a task creation request
            if '@todo' in text.lower() or 'create task' in text.lower():
                # Extract task from mention
                from tasks.ai_tasks import process_slack_message_for_tasks
                task_result = process_slack_message_for_tasks.delay(message_data)
                
                # Send confirmation
                client.chat_postMessage(
                    channel=channel,
                    text="üëç I'll analyze this message for tasks and create them automatically!",
                    thread_ts=message_data.get('ts')
                )
                
                return {'status': 'success', 'action': 'task_creation_triggered'}
            
            elif 'report' in text.lower():
                # Generate quick status report
                client.chat_postMessage(
                    channel=channel,
                    text="üìä Generating your progress report... I'll post it shortly!",
                    thread_ts=message_data.get('ts')
                )
                
                from tasks.ai_tasks import generate_weekly_report
                report_result = generate_weekly_report.delay('default_org')
                
                return {'status': 'success', 'action': 'report_generation_triggered'}
            
            else:
                # General AI assistant response
                client.chat_postMessage(
                    channel=channel,
                    text="Hi! I can help you create tasks (mention @todo) or generate reports. What would you like me to do?",
                    thread_ts=message_data.get('ts')
                )
                
                return {'status': 'success', 'action': 'general_response'}
            
    except SlackApiError as e:
        logger.error(f"Slack API error: {e}")
        return {'status': 'error', 'message': f"Slack API error: {e.response['error']}"}
    except Exception as e:
        logger.error(f"Slack mention processing failed: {e}")
        return {'status': 'error', 'message': str(e)}